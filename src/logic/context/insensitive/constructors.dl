.type ContextItem = symbol
.type Context = [ci: ContextItem]
.type AContext = [ci: ContextItem]


.decl context(?ctx:Context)
.decl acontext(?allocCtx:AContext)
.decl context_item(?item:ContextItem)

//-----------------------------------------------------
// Context Constructors
//-----------------------------------------------------

.decl context_request(?callerCtx: Context, ?actx: AContext, ?invoc: Instruction, ?tofunction: Function)
.decl context_response(?callerCtx: Context, ?actx: AContext, ?invoc: Instruction, ?ctx: Context)
.decl acontext_new(?item:ContextItem, ?actx:AContext)

context(?ctx),
context_response(?callerCtx, ?actx, ?invoc, ?ctx) :-
   context_request(?callerCtx, ?actx, ?invoc, _),
   ?ctx = ["<<empty-context>>"].


.decl AContextFromContext(?ctx: Context, ?actx: AContext)

AContextFromContext(?ctx, ?actx) :-
  empty_context(?ctx),
  empty_acontext(?actx).
