//------------------------------------------------------------------------------
// [2 Call-site Sensitive + Heap Analysis]
//
// In this analysis, context is the cons of the latest 2 invocation
// instructions, whereas the allocation context consists of just the
// latest invocation instruction.
//------------------------------------------------------------------------------

.type Context = [?item0: ContextItem, ?item1: ContextItem]
.type AContext = ContextItem
.type ContextItem = Instruction | symbol


.decl context(?ctx:Context)
.decl acontext(?allocCtx:AContext)
.decl context_item(?item:ContextItem)

//-----------------------------------------------------
// Context Constructors
//-----------------------------------------------------


.decl context_new(?item: ContextItem, ?ctx:Context)
.decl acontext_new(?item: ContextItem, ?actx:AContext)


.decl context_request(?callerCtx: Context, ?actx: AContext, ?invoc: Instruction, ?tofunction: Function)
.decl context_response(?callerCtx: Context, ?actx: AContext, ?invoc: Instruction, ?ctx: Context)

context(?ctx),
context_response(?callerCtx, ?actx, ?invoc, ?ctx) :-
   context_request(?callerCtx, ?actx, ?invoc),
   context_item(?item0),
   ?callerCtx=[?item1, ?item0],
   ?ctx = [?item0, ?invoc].


.decl acontext_request(?invoc: ContextItem)
.decl acontext_response(?invoc: ContextItem, ?ctx: AContext)

acontext_response(?invoc, ?actx) :-
   acontext_request(?invoc),
   ?actx=?invoc.


//-----------------------------------------------------
// Context Item Constructors
//-----------------------------------------------------

.decl context_item_by_invoc(?invoc:Instruction, ?ctxItem:ContextItem)
.decl context_item_invoc(?ctxItem:ContextItem, ?invoc:Instruction)

context_item_invoc(?ctxItem, ?invoc) :-
   context_item_by_invoc(?invoc, ?ctxItem).

context_item(?instr)
 , context_item_by_invoc(?instr, ?instr):-
   (call_instruction(?instr) ;
   invoke_instruction(?instr)),
   ?instr = ?instr.


// Dummy context items (needed for empty contexts)
.decl matches_string_context(?str:symbol)

matches_string_context(?str):-
   ?str = "<<empty-context>>";
   ?str = "<<main-context>>";
   ?str = "<<startup-context>>";
   ?str = "<<exit-context>>".

.decl dummy_context_item_by_str(?str:symbol,?ctxItem:ContextItem)
context_item(?str)
 , dummy_context_item_by_str(?str,?str)
 :-
   matches_string_context(?str).

//-----------------------------------------------------
// Macro-constructors
//-----------------------------------------------------

// record[Ctx, Alloc] = ACtx ->
//    context(Ctx), allocation(Alloc), acontext(ACtx).

// merge[CallerCtx, Invoc, ACtx, Alloc] = CalleeCtx ->
//    context(CallerCtx), context(CalleeCtx),
//    instruction(Invoc), acontext(ACtx), allocation(Alloc).

// // Macro-definitions
// acontext:new[Item] = ACtx <-
//    record[Ctx, _] = ACtx,
//    context:new[_, Item] = Ctx.

// context:new[LastItem, NewItem] = CalleeCtx <-
//    merge[CallerCtx, Invoc, _, _] = CalleeCtx,
//    context:new[_, LastItem] = CallerCtx,
//    context_item:by_invoc[Invoc] = NewItem.

//-----------------------------------------------------
// Unpacking context items
//-----------------------------------------------------


.decl context_getitem0(?ctx:Context, ?item:ContextItem)
context_getitem0(?ctx, ?item):-
   context_item(?item),
   context_response(?a,?b,?c,?ctx), context_response(?a,?b,?c,[_,?item]).
//   context_new([_, ?item], ?ctx).

.decl context_getitem1(?ctx:Context, ?item:ContextItem)
context_getitem1(?ctx, ?item):-
   context_item(?item),
   context_response(?a,?b,?c,?ctx), context_response(?a,?b,?c,[?item,_]).
//   context_new([?item, _], ?ctx).

.decl context_getinvoc0(?ctx:Context, ?item:ContextItem)
context_getinvoc0(?ctx, ?invoc):-
   context_getitem0(?ctx, ?item),
   context_item_invoc(?item, ?invoc).

.decl context_getinvoc1(?ctx:Context, ?item:ContextItem)
context_getinvoc1(?ctx, ?invoc):-
   context_getitem1(?ctx, ?item),
   context_item_invoc(?item, ?invoc).

.decl acontext_getitem(?actx:AContext, ?item:ContextItem)
acontext_getitem(?actx, ?item):-
   acontext_new(?item, ?actx).

.decl acontext_getinvoc(?actx:AContext, ?invoc:Instruction)
acontext_getinvoc(?actx, ?invoc) :-
   acontext_getitem(?actx, ?item),
   context_item_invoc(?item, ?invoc).

//Already generated output relations of 1-call-sensitivity
.decl context_getinvoc(?dummy : number)
.decl context_getitem(?ctx: Context, ?ctxItem: ContextItem)

context_getitem(?ctx, ?ctxItem) :-
   context_response(_, _, ?ctxItem, ?ctx).
