//------------------------------------------------------------------------------
// [1 Call-site Sensitive + Heap Analysis]
//
// In this analysis, context and alocation context is in both cases
// the latest invocation instruction.
//------------------------------------------------------------------------------

.type Context = ContextItem
.type AllocationContext = ContextItem
.type ContextItem = symbol | Instruction


.decl context(?ctx:Context)
.decl alloc_context(?allocCtx:AllocationContext)
.decl context_item(?item:ContextItem)

//-----------------------------------------------------
// Context Constructors
//-----------------------------------------------------

.decl context_new(?item:ContextItem, ?ctx:Context)
.decl alloc_context_new(?item:ContextItem, ?aCtx:AllocationContext)


.decl context_request(?callerCtx: Context, ?aCtx: AllocationContext, ?invoc: ContextItem)
.decl context_response(?callerCtx: Context, ?aCtx: AllocationContext, ?invoc: ContextItem, ?ctx: Context)

context_response(?callerCtx, ?aCtx, ?invoc, ?ctx) :-
   context_request(?callerCtx, ?aCtx, ?invoc),
   ?ctx=?invoc.


.decl alloc_context_request(?invoc: ContextItem)
.decl alloc_context_response(?invoc: ContextItem, ?ctx: AllocationContext)

alloc_context_response(?invoc, ?aCtx) :-
   alloc_context_request(?invoc),
   ?aCtx=?invoc.


//-----------------------------------------------------
// Context Item Constructors
//-----------------------------------------------------

.decl context_item_by_invoc(?invoc:Instruction, ?ctxItem:ContextItem)
.decl context_item_invoc(?ctxItem:ContextItem, ?invoc:Instruction)


context_item_invoc(?ctxItem, ?invoc) :-
   context_item_by_invoc(?invoc, ?ctxItem).

context_item(?instr1)
 , context_item_by_invoc(?instr1, ?instr2)
 :-
   call_instruction(?instr1),
   ?instr1= ?instr2.

context_item(?instr1)
 , context_item_by_invoc(?instr1, ?instr2)
 :-
   invoke_instruction(?instr1),
   ?instr1=?instr2.


// Dummy context items (needed for empty contexts)
.decl matches_string_context(?str:symbol)

matches_string_context(?str):-
   ?str = "<<empty-context>>".
matches_string_context(?str):-
   ?str = "<<main-context>>".
matches_string_context(?str):-
   ?str = "<<startup-context>>".
matches_string_context(?str):-
   ?str = "<<exit-context>>".

.decl dummy_context_item_by_str(?str:symbol,?ctxItem:ContextItem)
context_item(?ctxItem)
 , dummy_context_item_by_str(?str,?ctxItem)
 :-
   matches_string_context(?str),
   ?ctxItem=?str.

//-----------------------------------------------------
// Macro-constructors
//-----------------------------------------------------
.decl record(?ctx: Context, ?alloc: Allocation, ?aCtx: AllocationContext)
// record[Ctx, Alloc] = ACtx ->
//    context(Ctx), allocation(Alloc), alloc_context(ACtx).
.decl merge(?callerCtx: Context, ?invoc: Instruction, ?aCtx: AllocationContext, ?alloc: Allocation, ?calleeCtx: Context)
// merge[CallerCtx, Invoc, ACtx, Alloc] = CalleeCtx ->
//    context(CallerCtx), context(CalleeCtx),
//    instruction(Invoc), alloc_context(ACtx), allocation(Alloc).

// // Macro-definitions

alloc_context_new(?item, ?aCtx) :-
   record(?ctx, _, ?aCtx),
   context_new(?item, ?ctx).


context_new(?newItem, ?calleeCtx) :-
   merge(?callerCtx, ?invoc, _, _, ?calleeCtx),
   context_new(_,?callerCtx),
   context_item_by_invoc(?invoc, ?newItem).

//-----------------------------------------------------
// Unpacking context items
//-----------------------------------------------------

.decl context_getitem(?ctx:Context, ?item:ContextItem)
context_getitem(?ctx, ?item):-
   context_response(_,_,?item, ?ctx).

.decl alloc_context_getitem(?ctx:AllocationContext, ?item:ContextItem)
alloc_context_getitem(?ctx, ?item):-
   alloc_context_new(?item, ?ctx).

.decl context_getinvoc(?ctx:Context, ?invoc:Instruction)
context_getinvoc(?ctx, ?invoc):-
   context_getitem(?ctx, ?item),
   context_item_invoc(?item, ?invoc).

.decl alloc_context_getinvoc(?ctx:AllocationContext, ?invoc:Instruction)
alloc_context_getinvoc(?ctx, ?invoc) :-
   alloc_context_getitem(?ctx, ?item),
   context_item_invoc(?item, ?invoc).


//Already generated output relations of 2-call-sensitivity
.decl context_getinvoc0(?dummy : number)
.decl context_getitem0(?dummy : number)
.decl context_getinvoc1(?dummy : number)
.decl context_getitem1(?dummy : number)
