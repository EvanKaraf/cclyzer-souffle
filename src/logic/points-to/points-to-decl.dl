//-----------------------------------------------------------------------
// [Basic Concepts of Pointer Analysis]
//-----------------------------------------------------------------------

// The following relation tracks the flow of allocations to program
// variables. Named variables will point to their respective stack
// allocations.


.decl var_points_to(?actx: AContext, ?alloc: Allocation, ?ctx: Context, ?var: Variable)

// This is the equivalent relation that tracks flow of allocations
// among program constants. Note that references to global variables
// or functions are considered a type of constant in LLVM IR. Constant
// addresses are another type of constant that may point to
// memory. Moreover, a constant may be expanded to a larger complext
// constant (e.g., by a `bitcast` expression), through constant
// expressions.
//
// It is essential to be able to track the flow of allocations through
// all these types of constants, since an arbitrary complex constant
// expression may be used as an operand to a `store` or `load`
// instruction.

.decl constant_points_to(?constant: Constant, ?alloc: Allocation)


// Intermediate relations

.decl operand_points_to(?actx: AContext, ?alloc: Allocation, ?ctx: Context, ?operand: Operand)

.decl operand_points_to1(?actx: AContext, ?alloc: Allocation, ?ctx: Context, ?operand: Operand)
.decl operand_points_to2(?actx: AContext, ?alloc: Allocation, ?ctx: Context, ?operand: Operand)

.output operand_points_to1
.output operand_points_to2

operand_points_to1(?actx, ?alloc, ?ctx, ?ptrVar),
operand_points_to(?actx, ?alloc, ?ctx, ?ptrVar) :-
   var_points_to(?actx, ?alloc, ?ctx, ?ptrVar).

operand_points_to2(?actx, ?alloc, ?ctx, ?cons),
operand_points_to(?actx, ?alloc, ?ctx, ?cons) :-
   empty_acontext(?actx),
   constant_in_function(?cons, ?enclosingFunc),
   constant_points_to(?cons, ?alloc),
   reachable_context(?ctx, ?enclosingFunc).


// Sanity checks

reachable_context(?ctx, ?enclosingFunc) :-
   variable_in_function(?var, ?enclosingFunc),
   var_points_to(_, _, ?ctx, ?var).

/*
operand_points_to(_, _, Ctx, Operand)
 , operand:in_function[Operand] = EnclosingFunc
 ->
   reachable_context(Ctx, EnclosingFunc).
*/
//----------------------------
// Dereferencing Pointers
//----------------------------

// This is the traditional concept of `points-to`. It signifies that
// an allocation will point to another memory allocation when
// dereferenced.

.decl ptr_points_to(?actx: AContext, ?alloc: Allocation, ?ptrACtx: AContext, ?ptrAlloc: Allocation)


//----------------------------
// Call-Graph
//----------------------------

.decl callgraph_edge(?calleeCtx: Context, ?callee: FunctionDecl, ?callerCtx: Context, ?callerInstr: Instruction)
