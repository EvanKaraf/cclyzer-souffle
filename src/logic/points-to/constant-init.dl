// Track the constant that initializes an allocation

.decl initialized_by_constant(?alloc: Allocation, ?constant: Constant)

initialized_by_constant(?alloc, ?init) :-
   global_variable_has_initializer(?var, ?init),
   global_allocation_by_variable(?var, ?baseAlloc),
   alloc_subregion_at_array_index(?baseAlloc, 0, ?alloc).

initialized_by_constant(?alloc, ?innerConstant) :-
   initialized_by_constant(?baseAlloc, ?constant),
   constant_struct(?constant),
   constant_struct_index(?constant, ?field, ?innerConstant),
   alloc_subregion_at_field(?baseAlloc, ?field, ?alloc),
   // check type compatibility
   constant_has_type(?constant, ?constantType),
   allocation_type(?baseAlloc, ?type),
   struct_type(?type),
   struct_type(?constantType),
   type_compatible_up_to_field(?type, ?constantType, ?field).

initialized_by_constant(?alloc, ?innerConstant) :-
   initialized_by_constant(?baseAlloc, ?constant),
   constant_array(?constant),
   constant_array_index(?constant, ?index, ?innerConstant),
   alloc_subregion_at_array_index(?baseAlloc, ?index, ?alloc),
   // check type compatibility
   constant_has_type(?constant, ?constantType),
   allocation_type(?baseAlloc, ?type),
   array_type(?type),
   array_type(?constantType),
   type_compatible(?type, ?constantType).


// Augment array indices to include those from constant initializers

array_indices__no_typecomp(?constantType, ?index) :-
   constant_has_type(?constant, ?constantType),
   constant_array_index(?constant, ?index, _),
   array_type(?constantType).


// A constant may point to a global allocation, so if used to
// initialize another global allocation, we have to track the
// resulting dereference edge.
ptr_points_to(?actx, ?someAlloc, ?actx, ?alloc) :-
   empty_acontext(?actx),
   initialized_by_constant(?alloc, ?constant),
   constant_points_to(?constant, ?someAlloc).
